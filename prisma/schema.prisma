generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 

  newsReporter       newsReporter?
  Advertiser       Advertiser?

  userType            UserType?
  approvalStatus ApprovalStatus?

  onboardingCompleted Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  NEWSREPORTER
  ADVERTISER
  SUPERADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECT
}

model newsReporter {
  id       String  @id @default(uuid())
  reporterName String?
  location String
  bio    String
  profilePicture     String
  phoneNumber  String
  facebookProfileAddress String?

  newsArticle newsArticle[]

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  registered Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Advertiser {
  id     String @id @default(uuid())
  supervisorName   String
  companyName   String
  companyAddress  String
  phoneNumber  String
  aboutCompany    String
  companyWebsite    String?

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  registered Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model newsArticle {
  id     String @id @default(uuid())
  newsHeading String
  newsResource String
  newsLocation String?
  newsCategory newsCategory
  newsPicture String
  newsPictureHeading String
  newsPictureCredit String
  isFeatured  Boolean       @default(false)
  newsDetails String
  quotes          quote[]

  newsReporter   newsReporter  @relation(fields: [reporterId], references: [id])
  reporterId String

  duration Int?
  newsArticleStatus  newsArticleStatus@default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum newsArticleStatus {
  ACTIVE
  DRAFT
  EXPIRED
}

model quote {
  id          String       @id @default(uuid())
  text        String
  speakerInfo String
  article     newsArticle  @relation(fields: [articleId], references: [id])
  articleId   String
  createdAt   DateTime     @default(now())
}

enum newsCategory {
  LATEST
  NATIONAL
  POLITICS
  COUNTRYWIDE
  INTERNATIONAL
  SPORTS
  EDUCATION
  HEALTH
  OPINION
  RELIGION
  CRIME
  TECHNOLOGY
  ENTERTAINMENT
  ECONOMY
  LAW_AND_JUSTICE
  ENVIRONMENT
  SCIENCE
}



model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}